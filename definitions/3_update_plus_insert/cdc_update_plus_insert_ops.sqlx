config {
    type: "operations"
}

-- Get the last merged timestamp from the output table
-- Only events newer than this should be merged
DECLARE last_merged_ts TIMESTAMP DEFAULT (SELECT MAX(scd_valid_from) FROM ${ref("cdc_update_plus_insert")});

-- Create a TEMP table containing all the new events that should be merged
CREATE TEMP TABLE events_that_should_be_merged AS (
    SELECT 
        *
    FROM ${ref("transformed_events")}
    WHERE (timestamp > last_merged_ts) OR (last_merged_ts IS NULL)
);

-- Update the current records that have been changed
-- Set both their valid_to timestamp and is_current to false
UPDATE ${ref("cdc_update_plus_insert")} AS merged
SET scd_valid_to = new_valid_tos.new_valid_to, is_current = FALSE
FROM (
    SELECT `key`, MIN(timestamp) AS new_valid_to
    FROM events_that_should_be_merged
    GROUP BY `key`
) AS new_valid_tos
WHERE merged.key = new_valid_tos.key
    AND merged.is_current IS TRUE;

-- Insert the new events into the table
-- Populate scd_valid_from and scd_valid_to accordignly
INSERT INTO ${ref("cdc_update_plus_insert")}
WITH new_insertions AS (
    SELECT
        * EXCEPT (timestamp),
        timestamp AS scd_valid_from,
        LEAD(timestamp) OVER 
            (PARTITION BY key ORDER BY timestamp ASC)
        AS scd_valid_to
    FROM events_that_should_be_merged
)
SELECT
    * EXCEPT (operation),
    scd_valid_to IS NULL AS is_current
FROM new_insertions
WHERE operation != 'D';
